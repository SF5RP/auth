# Nginx configuration for User Service
# Place this file in /etc/nginx/sites-available/user-service
# Enable with: sudo ln -s /etc/nginx/sites-available/user-service /etc/nginx/sites-enabled/

# Upstream backend server
upstream user_backend {
    server 127.0.0.1:8080;
    # Add more servers for load balancing:
    # server 127.0.0.1:8081;
    # server 127.0.0.1:8082;
}

upstream user_frontend {
    server 127.0.0.1:3000;
    # Add more servers for load balancing:
    # server 127.0.0.1:3001;
    # server 127.0.0.1:3002;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=2r/s;
limit_req_zone $binary_remote_addr zone=callback:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=admin:10m rate=5r/s;

server {
    listen 80;
    server_name your-domain.com www.your-domain.com;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:;";

    # Logging
    access_log /var/log/nginx/user-service.access.log;
    error_log /var/log/nginx/user-service.error.log;

    # Health check endpoint
    location /health {
        proxy_pass http://user_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Cache health checks
        proxy_cache_valid 200 1m;
        access_log off;
    }

    # Login endpoint with strict rate limiting
    location ~ ^/login$ {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://user_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Callback endpoint with moderate rate limiting
    location ~ ^/callback$ {
        limit_req zone=callback burst=10 nodelay;
        proxy_pass http://user_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Admin endpoints with moderate rate limiting
    location ~ ^/admin {
        limit_req zone=admin burst=10 nodelay;
        proxy_pass http://user_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Other API endpoints
    location ~ ^/(refresh|me|logout|servers|characters) {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://user_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Frontend static files (if serving through nginx)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://user_frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Cache static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Frontend (Next.js) - all other requests
    location / {
        proxy_pass http://user_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
    }
    location ~ /(\.env|\.git|\.htaccess|\.htpasswd|\.config|\.conf)$ {
        deny all;
    }

    # Block access to backup files
    location ~ ~$ {
        deny all;
    }

    # Block access to temporary files
    location ~ \.(tmp|temp|log)$ {
        deny all;
    }
}

# SSL Configuration (uncomment after obtaining SSL certificate)
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com www.your-domain.com;
#
#     ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # ... copy all location blocks from above
# }
#
# # HTTP to HTTPS redirect
# server {
#     listen 80;
#     server_name your-domain.com www.your-domain.com;
#     return 301 https://$server_name$request_uri;
# }